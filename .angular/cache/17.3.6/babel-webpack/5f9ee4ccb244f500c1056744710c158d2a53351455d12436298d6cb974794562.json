{"ast":null,"code":"import getNCheck from \"nth-check\";\nimport boolbase from \"boolbase\";\nfunction getChildFunc(next, adapter) {\n  return elem => {\n    const parent = adapter.getParent(elem);\n    return parent != null && adapter.isTag(parent) && next(elem);\n  };\n}\nexport const filters = {\n  contains(next, text, {\n    adapter\n  }) {\n    return function contains(elem) {\n      return next(elem) && adapter.getText(elem).includes(text);\n    };\n  },\n  icontains(next, text, {\n    adapter\n  }) {\n    const itext = text.toLowerCase();\n    return function icontains(elem) {\n      return next(elem) && adapter.getText(elem).toLowerCase().includes(itext);\n    };\n  },\n  // Location specific methods\n  \"nth-child\"(next, rule, {\n    adapter,\n    equals\n  }) {\n    const func = getNCheck(rule);\n    if (func === boolbase.falseFunc) return boolbase.falseFunc;\n    if (func === boolbase.trueFunc) return getChildFunc(next, adapter);\n    return function nthChild(elem) {\n      const siblings = adapter.getSiblings(elem);\n      let pos = 0;\n      for (let i = 0; i < siblings.length; i++) {\n        if (equals(elem, siblings[i])) break;\n        if (adapter.isTag(siblings[i])) {\n          pos++;\n        }\n      }\n      return func(pos) && next(elem);\n    };\n  },\n  \"nth-last-child\"(next, rule, {\n    adapter,\n    equals\n  }) {\n    const func = getNCheck(rule);\n    if (func === boolbase.falseFunc) return boolbase.falseFunc;\n    if (func === boolbase.trueFunc) return getChildFunc(next, adapter);\n    return function nthLastChild(elem) {\n      const siblings = adapter.getSiblings(elem);\n      let pos = 0;\n      for (let i = siblings.length - 1; i >= 0; i--) {\n        if (equals(elem, siblings[i])) break;\n        if (adapter.isTag(siblings[i])) {\n          pos++;\n        }\n      }\n      return func(pos) && next(elem);\n    };\n  },\n  \"nth-of-type\"(next, rule, {\n    adapter,\n    equals\n  }) {\n    const func = getNCheck(rule);\n    if (func === boolbase.falseFunc) return boolbase.falseFunc;\n    if (func === boolbase.trueFunc) return getChildFunc(next, adapter);\n    return function nthOfType(elem) {\n      const siblings = adapter.getSiblings(elem);\n      let pos = 0;\n      for (let i = 0; i < siblings.length; i++) {\n        const currentSibling = siblings[i];\n        if (equals(elem, currentSibling)) break;\n        if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {\n          pos++;\n        }\n      }\n      return func(pos) && next(elem);\n    };\n  },\n  \"nth-last-of-type\"(next, rule, {\n    adapter,\n    equals\n  }) {\n    const func = getNCheck(rule);\n    if (func === boolbase.falseFunc) return boolbase.falseFunc;\n    if (func === boolbase.trueFunc) return getChildFunc(next, adapter);\n    return function nthLastOfType(elem) {\n      const siblings = adapter.getSiblings(elem);\n      let pos = 0;\n      for (let i = siblings.length - 1; i >= 0; i--) {\n        const currentSibling = siblings[i];\n        if (equals(elem, currentSibling)) break;\n        if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {\n          pos++;\n        }\n      }\n      return func(pos) && next(elem);\n    };\n  },\n  // TODO determine the actual root element\n  root(next, _rule, {\n    adapter\n  }) {\n    return elem => {\n      const parent = adapter.getParent(elem);\n      return (parent == null || !adapter.isTag(parent)) && next(elem);\n    };\n  },\n  scope(next, rule, options, context) {\n    const {\n      equals\n    } = options;\n    if (!context || context.length === 0) {\n      // Equivalent to :root\n      return filters[\"root\"](next, rule, options);\n    }\n    if (context.length === 1) {\n      // NOTE: can't be unpacked, as :has uses this for side-effects\n      return elem => equals(context[0], elem) && next(elem);\n    }\n    return elem => context.includes(elem) && next(elem);\n  },\n  hover: dynamicStatePseudo(\"isHovered\"),\n  visited: dynamicStatePseudo(\"isVisited\"),\n  active: dynamicStatePseudo(\"isActive\")\n};\n/**\n * Dynamic state pseudos. These depend on optional Adapter methods.\n *\n * @param name The name of the adapter method to call.\n * @returns Pseudo for the `filters` object.\n */\nfunction dynamicStatePseudo(name) {\n  return function dynamicPseudo(next, _rule, {\n    adapter\n  }) {\n    const func = adapter[name];\n    if (typeof func !== \"function\") {\n      return boolbase.falseFunc;\n    }\n    return function active(elem) {\n      return func(elem) && next(elem);\n    };\n  };\n}\n//# sourceMappingURL=filters.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}