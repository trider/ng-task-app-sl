{"ast":null,"code":"'use strict';\n\nlet Container = require('./container');\nlet LazyResult, Processor;\nlet Document = /*#__PURE__*/(() => {\n  class Document extends Container {\n    constructor(defaults) {\n      // type needs to be passed to super, otherwise child roots won't be normalized correctly\n      super({\n        type: 'document',\n        ...defaults\n      });\n      if (!this.nodes) {\n        this.nodes = [];\n      }\n    }\n    toResult(opts = {}) {\n      let lazy = new LazyResult(new Processor(), this, opts);\n      return lazy.stringify();\n    }\n  }\n  Document.registerLazyResult = dependant => {\n    LazyResult = dependant;\n  };\n  Document.registerProcessor = dependant => {\n    Processor = dependant;\n  };\n  return Document;\n})();\nmodule.exports = Document;\nDocument.default = Document;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}