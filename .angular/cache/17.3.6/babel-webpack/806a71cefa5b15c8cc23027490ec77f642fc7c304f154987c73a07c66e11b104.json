{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMediaFeature = parseMediaFeature;\nexports.parseMediaQuery = parseMediaQuery;\nexports.parseMediaList = parseMediaList;\nvar _Node = require('./nodes/Node');\nvar _Node2 = _interopRequireDefault(_Node);\nvar _Container = require('./nodes/Container');\nvar _Container2 = _interopRequireDefault(_Container);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\r\n * Parses a media feature expression, e.g. `max-width: 10px`, `(color)`\r\n *\r\n * @param {string} string - the source expression string, can be inside parens\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes, the first element being a media feature,\r\n *    the secont - its value (may be missing)\r\n */\n\nfunction parseMediaFeature(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n  var modesEntered = [{\n    mode: 'normal',\n    character: null\n  }];\n  var result = [];\n  var lastModeIndex = 0;\n  var mediaFeature = '';\n  var colon = null;\n  var mediaFeatureValue = null;\n  var indexLocal = index;\n  var stringNormalized = string;\n  // Strip trailing parens (if any), and correct the starting index\n  if (string[0] === '(' && string[string.length - 1] === ')') {\n    stringNormalized = string.substring(1, string.length - 1);\n    indexLocal++;\n  }\n  for (var i = 0; i < stringNormalized.length; i++) {\n    var character = stringNormalized[i];\n\n    // If entering/exiting a string\n    if (character === '\\'' || character === '\"') {\n      if (modesEntered[lastModeIndex].isCalculationEnabled === true) {\n        modesEntered.push({\n          mode: 'string',\n          isCalculationEnabled: false,\n          character: character\n        });\n        lastModeIndex++;\n      } else if (modesEntered[lastModeIndex].mode === 'string' && modesEntered[lastModeIndex].character === character && stringNormalized[i - 1] !== '\\\\') {\n        modesEntered.pop();\n        lastModeIndex--;\n      }\n    }\n\n    // If entering/exiting interpolation\n    if (character === '{') {\n      modesEntered.push({\n        mode: 'interpolation',\n        isCalculationEnabled: true\n      });\n      lastModeIndex++;\n    } else if (character === '}') {\n      modesEntered.pop();\n      lastModeIndex--;\n    }\n\n    // If a : is met outside of a string, function call or interpolation, than\n    // this : separates a media feature and a value\n    if (modesEntered[lastModeIndex].mode === 'normal' && character === ':') {\n      var mediaFeatureValueStr = stringNormalized.substring(i + 1);\n      mediaFeatureValue = {\n        type: 'value',\n        before: /^(\\s*)/.exec(mediaFeatureValueStr)[1],\n        after: /(\\s*)$/.exec(mediaFeatureValueStr)[1],\n        value: mediaFeatureValueStr.trim()\n      };\n      // +1 for the colon\n      mediaFeatureValue.sourceIndex = mediaFeatureValue.before.length + i + 1 + indexLocal;\n      colon = {\n        type: 'colon',\n        sourceIndex: i + indexLocal,\n        after: mediaFeatureValue.before,\n        value: ':'\n      };\n      break;\n    }\n    mediaFeature += character;\n  }\n\n  // Forming a media feature node\n  mediaFeature = {\n    type: 'media-feature',\n    before: /^(\\s*)/.exec(mediaFeature)[1],\n    after: /(\\s*)$/.exec(mediaFeature)[1],\n    value: mediaFeature.trim()\n  };\n  mediaFeature.sourceIndex = mediaFeature.before.length + indexLocal;\n  result.push(mediaFeature);\n  if (colon !== null) {\n    colon.before = mediaFeature.after;\n    result.push(colon);\n  }\n  if (mediaFeatureValue !== null) {\n    result.push(mediaFeatureValue);\n  }\n  return result;\n}\n\n/**\r\n * Parses a media query, e.g. `screen and (color)`, `only tv`\r\n *\r\n * @param {string} string - the source media query string\r\n * @param {Number} index - the index of `string` in the overall input\r\n *\r\n * @return {Array} an array of Nodes and Containers\r\n */\n\nfunction parseMediaQuery(string) {\n  var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n  var result = [];\n\n  // How many timies the parser entered parens/curly braces\n  var localLevel = 0;\n  // Has any keyword, media type, media feature expression or interpolation\n  // ('element' hereafter) started\n  var insideSomeValue = false;\n  var node = void 0;\n  function resetNode() {\n    return {\n      before: '',\n      after: '',\n      value: ''\n    };\n  }\n  node = resetNode();\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    // If not yet entered any element\n    if (!insideSomeValue) {\n      if (character.search(/\\s/) !== -1) {\n        // A whitespace\n        // Don't form 'after' yet; will do it later\n        node.before += character;\n      } else {\n        // Not a whitespace - entering an element\n        // Expression start\n        if (character === '(') {\n          node.type = 'media-feature-expression';\n          localLevel++;\n        }\n        node.value = character;\n        node.sourceIndex = index + i;\n        insideSomeValue = true;\n      }\n    } else {\n      // Already in the middle of some alement\n      node.value += character;\n\n      // Here parens just increase localLevel and don't trigger a start of\n      // a media feature expression (since they can't be nested)\n      // Interpolation start\n      if (character === '{' || character === '(') {\n        localLevel++;\n      }\n      // Interpolation/function call/media feature expression end\n      if (character === ')' || character === '}') {\n        localLevel--;\n      }\n    }\n\n    // If exited all parens/curlies and the next symbol\n    if (insideSomeValue && localLevel === 0 && (character === ')' || i === string.length - 1 || string[i + 1].search(/\\s/) !== -1)) {\n      if (['not', 'only', 'and'].indexOf(node.value) !== -1) {\n        node.type = 'keyword';\n      }\n      // if it's an expression, parse its contents\n      if (node.type === 'media-feature-expression') {\n        node.nodes = parseMediaFeature(node.value, node.sourceIndex);\n      }\n      result.push(Array.isArray(node.nodes) ? new _Container2.default(node) : new _Node2.default(node));\n      node = resetNode();\n      insideSomeValue = false;\n    }\n  }\n\n  // Now process the result array - to specify undefined types of the nodes\n  // and specify the `after` prop\n  for (var _i = 0; _i < result.length; _i++) {\n    node = result[_i];\n    if (_i > 0) {\n      result[_i - 1].after = node.before;\n    }\n\n    // Node types. Might not be set because contains interpolation/function\n    // calls or fully consists of them\n    if (node.type === undefined) {\n      if (_i > 0) {\n        // only `and` can follow an expression\n        if (result[_i - 1].type === 'media-feature-expression') {\n          node.type = 'keyword';\n          continue;\n        }\n        // Anything after 'only|not' is a media type\n        if (result[_i - 1].value === 'not' || result[_i - 1].value === 'only') {\n          node.type = 'media-type';\n          continue;\n        }\n        // Anything after 'and' is an expression\n        if (result[_i - 1].value === 'and') {\n          node.type = 'media-feature-expression';\n          continue;\n        }\n        if (result[_i - 1].type === 'media-type') {\n          // if it is the last element - it might be an expression\n          // or 'and' depending on what is after it\n          if (!result[_i + 1]) {\n            node.type = 'media-feature-expression';\n          } else {\n            node.type = result[_i + 1].type === 'media-feature-expression' ? 'keyword' : 'media-feature-expression';\n          }\n        }\n      }\n      if (_i === 0) {\n        // `screen`, `fn( ... )`, `#{ ... }`. Not an expression, since then\n        // its type would have been set by now\n        if (!result[_i + 1]) {\n          node.type = 'media-type';\n          continue;\n        }\n\n        // `screen and` or `#{...} (max-width: 10px)`\n        if (result[_i + 1] && (result[_i + 1].type === 'media-feature-expression' || result[_i + 1].type === 'keyword')) {\n          node.type = 'media-type';\n          continue;\n        }\n        if (result[_i + 2]) {\n          // `screen and (color) ...`\n          if (result[_i + 2].type === 'media-feature-expression') {\n            node.type = 'media-type';\n            result[_i + 1].type = 'keyword';\n            continue;\n          }\n          // `only screen and ...`\n          if (result[_i + 2].type === 'keyword') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            continue;\n          }\n        }\n        if (result[_i + 3]) {\n          // `screen and (color) ...`\n          if (result[_i + 3].type === 'media-feature-expression') {\n            node.type = 'keyword';\n            result[_i + 1].type = 'media-type';\n            result[_i + 2].type = 'keyword';\n            continue;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\r\n * Parses a media query list. Takes a possible `url()` at the start into\r\n * account, and divides the list into media queries that are parsed separately\r\n *\r\n * @param {string} string - the source media query list string\r\n *\r\n * @return {Array} an array of Nodes/Containers\r\n */\n\nfunction parseMediaList(string) {\n  var result = [];\n  var interimIndex = 0;\n  var levelLocal = 0;\n\n  // Check for a `url(...)` part (if it is contents of an @import rule)\n  var doesHaveUrl = /^(\\s*)url\\s*\\(/.exec(string);\n  if (doesHaveUrl !== null) {\n    var i = doesHaveUrl[0].length;\n    var parenthesesLv = 1;\n    while (parenthesesLv > 0) {\n      var character = string[i];\n      if (character === '(') {\n        parenthesesLv++;\n      }\n      if (character === ')') {\n        parenthesesLv--;\n      }\n      i++;\n    }\n    result.unshift(new _Node2.default({\n      type: 'url',\n      value: string.substring(0, i).trim(),\n      sourceIndex: doesHaveUrl[1].length,\n      before: doesHaveUrl[1],\n      after: /^(\\s*)/.exec(string.substring(i))[1]\n    }));\n    interimIndex = i;\n  }\n\n  // Start processing the media query list\n  for (var _i2 = interimIndex; _i2 < string.length; _i2++) {\n    var _character = string[_i2];\n\n    // Dividing the media query list into comma-separated media queries\n    // Only count commas that are outside of any parens\n    // (i.e., not part of function call params list, etc.)\n    if (_character === '(') {\n      levelLocal++;\n    }\n    if (_character === ')') {\n      levelLocal--;\n    }\n    if (levelLocal === 0 && _character === ',') {\n      var _mediaQueryString = string.substring(interimIndex, _i2);\n      var _spaceBefore = /^(\\s*)/.exec(_mediaQueryString)[1];\n      result.push(new _Container2.default({\n        type: 'media-query',\n        value: _mediaQueryString.trim(),\n        sourceIndex: interimIndex + _spaceBefore.length,\n        nodes: parseMediaQuery(_mediaQueryString, interimIndex),\n        before: _spaceBefore,\n        after: /(\\s*)$/.exec(_mediaQueryString)[1]\n      }));\n      interimIndex = _i2 + 1;\n    }\n  }\n  var mediaQueryString = string.substring(interimIndex);\n  var spaceBefore = /^(\\s*)/.exec(mediaQueryString)[1];\n  result.push(new _Container2.default({\n    type: 'media-query',\n    value: mediaQueryString.trim(),\n    sourceIndex: interimIndex + spaceBefore.length,\n    nodes: parseMediaQuery(mediaQueryString, interimIndex),\n    before: spaceBefore,\n    after: /(\\s*)$/.exec(mediaQueryString)[1]\n  }));\n  return result;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}