{"ast":null,"code":"import { attributeRules } from \"./attributes.js\";\nimport { compilePseudoSelector } from \"./pseudo-selectors/index.js\";\nimport { SelectorType } from \"css-what\";\nfunction getElementParent(node, adapter) {\n  const parent = adapter.getParent(node);\n  if (parent && adapter.isTag(parent)) {\n    return parent;\n  }\n  return null;\n}\n/*\n * All available rules\n */\nexport function compileGeneralSelector(next, selector, options, context, compileToken) {\n  const {\n    adapter,\n    equals\n  } = options;\n  switch (selector.type) {\n    case SelectorType.PseudoElement:\n      {\n        throw new Error(\"Pseudo-elements are not supported by css-select\");\n      }\n    case SelectorType.ColumnCombinator:\n      {\n        throw new Error(\"Column combinators are not yet supported by css-select\");\n      }\n    case SelectorType.Attribute:\n      {\n        if (selector.namespace != null) {\n          throw new Error(\"Namespaced attributes are not yet supported by css-select\");\n        }\n        if (!options.xmlMode || options.lowerCaseAttributeNames) {\n          selector.name = selector.name.toLowerCase();\n        }\n        return attributeRules[selector.action](next, selector, options);\n      }\n    case SelectorType.Pseudo:\n      {\n        return compilePseudoSelector(next, selector, options, context, compileToken);\n      }\n    // Tags\n    case SelectorType.Tag:\n      {\n        if (selector.namespace != null) {\n          throw new Error(\"Namespaced tag names are not yet supported by css-select\");\n        }\n        let {\n          name\n        } = selector;\n        if (!options.xmlMode || options.lowerCaseTags) {\n          name = name.toLowerCase();\n        }\n        return function tag(elem) {\n          return adapter.getName(elem) === name && next(elem);\n        };\n      }\n    // Traversal\n    case SelectorType.Descendant:\n      {\n        if (options.cacheResults === false || typeof WeakSet === \"undefined\") {\n          return function descendant(elem) {\n            let current = elem;\n            while (current = getElementParent(current, adapter)) {\n              if (next(current)) {\n                return true;\n              }\n            }\n            return false;\n          };\n        }\n        // @ts-expect-error `ElementNode` is not extending object\n        const isFalseCache = new WeakSet();\n        return function cachedDescendant(elem) {\n          let current = elem;\n          while (current = getElementParent(current, adapter)) {\n            if (!isFalseCache.has(current)) {\n              if (adapter.isTag(current) && next(current)) {\n                return true;\n              }\n              isFalseCache.add(current);\n            }\n          }\n          return false;\n        };\n      }\n    case \"_flexibleDescendant\":\n      {\n        // Include element itself, only used while querying an array\n        return function flexibleDescendant(elem) {\n          let current = elem;\n          do {\n            if (next(current)) return true;\n          } while (current = getElementParent(current, adapter));\n          return false;\n        };\n      }\n    case SelectorType.Parent:\n      {\n        return function parent(elem) {\n          return adapter.getChildren(elem).some(elem => adapter.isTag(elem) && next(elem));\n        };\n      }\n    case SelectorType.Child:\n      {\n        return function child(elem) {\n          const parent = adapter.getParent(elem);\n          return parent != null && adapter.isTag(parent) && next(parent);\n        };\n      }\n    case SelectorType.Sibling:\n      {\n        return function sibling(elem) {\n          const siblings = adapter.getSiblings(elem);\n          for (let i = 0; i < siblings.length; i++) {\n            const currentSibling = siblings[i];\n            if (equals(elem, currentSibling)) break;\n            if (adapter.isTag(currentSibling) && next(currentSibling)) {\n              return true;\n            }\n          }\n          return false;\n        };\n      }\n    case SelectorType.Adjacent:\n      {\n        if (adapter.prevElementSibling) {\n          return function adjacent(elem) {\n            const previous = adapter.prevElementSibling(elem);\n            return previous != null && next(previous);\n          };\n        }\n        return function adjacent(elem) {\n          const siblings = adapter.getSiblings(elem);\n          let lastElement;\n          for (let i = 0; i < siblings.length; i++) {\n            const currentSibling = siblings[i];\n            if (equals(elem, currentSibling)) break;\n            if (adapter.isTag(currentSibling)) {\n              lastElement = currentSibling;\n            }\n          }\n          return !!lastElement && next(lastElement);\n        };\n      }\n    case SelectorType.Universal:\n      {\n        if (selector.namespace != null && selector.namespace !== \"*\") {\n          throw new Error(\"Namespaced universal selectors are not yet supported by css-select\");\n        }\n        return next;\n      }\n  }\n}\n//# sourceMappingURL=general.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}