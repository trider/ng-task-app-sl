{"ast":null,"code":"'use strict';\n\nlet Container = require('./container');\nlet LazyResult, Processor;\nlet Root = /*#__PURE__*/(() => {\n  class Root extends Container {\n    constructor(defaults) {\n      super(defaults);\n      this.type = 'root';\n      if (!this.nodes) this.nodes = [];\n    }\n    normalize(child, sample, type) {\n      let nodes = super.normalize(child);\n      if (sample) {\n        if (type === 'prepend') {\n          if (this.nodes.length > 1) {\n            sample.raws.before = this.nodes[1].raws.before;\n          } else {\n            delete sample.raws.before;\n          }\n        } else if (this.first !== sample) {\n          for (let node of nodes) {\n            node.raws.before = sample.raws.before;\n          }\n        }\n      }\n      return nodes;\n    }\n    removeChild(child, ignore) {\n      let index = this.index(child);\n      if (!ignore && index === 0 && this.nodes.length > 1) {\n        this.nodes[1].raws.before = this.nodes[index].raws.before;\n      }\n      return super.removeChild(child);\n    }\n    toResult(opts = {}) {\n      let lazy = new LazyResult(new Processor(), this, opts);\n      return lazy.stringify();\n    }\n  }\n  Root.registerLazyResult = dependant => {\n    LazyResult = dependant;\n  };\n  Root.registerProcessor = dependant => {\n    Processor = dependant;\n  };\n  return Root;\n})();\nmodule.exports = Root;\nRoot.default = Root;\nContainer.registerRoot(Root);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}