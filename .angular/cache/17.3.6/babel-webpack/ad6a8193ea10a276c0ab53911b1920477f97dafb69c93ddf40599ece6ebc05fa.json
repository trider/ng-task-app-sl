{"ast":null,"code":"'use strict';\n\nlet pico = require('picocolors');\nlet tokenizer = require('./tokenize');\nlet Input;\nfunction registerInput(dependant) {\n  Input = dependant;\n}\nconst HIGHLIGHT_THEME = {\n  ';': pico.yellow,\n  ':': pico.yellow,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  'at-word': pico.cyan,\n  'brackets': pico.cyan,\n  'call': pico.cyan,\n  'class': pico.yellow,\n  'comment': pico.gray,\n  'hash': pico.magenta,\n  'string': pico.green\n};\nfunction getTokenType([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class';\n    }\n    if (value[0] === '#') {\n      return 'hash';\n    }\n  }\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken();\n    processor.back(next);\n    if (next[0] === 'brackets' || next[0] === '(') return 'call';\n  }\n  return type;\n}\nfunction terminalHighlight(css) {\n  let processor = tokenizer(new Input(css), {\n    ignoreErrors: true\n  });\n  let result = '';\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken();\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n    if (color) {\n      result += token[1].split(/\\r?\\n/).map(i => color(i)).join('\\n');\n    } else {\n      result += token[1];\n    }\n  }\n  return result;\n}\nterminalHighlight.registerInput = registerInput;\nmodule.exports = terminalHighlight;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}